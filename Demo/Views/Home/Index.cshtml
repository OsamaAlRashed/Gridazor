@model IndexVM
@using Gridazor;
@inject IViewLocalizer viewLocalizer;
@using System.Globalization
@using Gridazor.Attributes
@using Gridazor.Models
@using Microsoft.AspNetCore.Mvc.Localization
@{
    string rtl = CultureInfo.CurrentCulture.TextInfo.IsRightToLeft.ToString().ToLower();
}

<div class="card card-primary">
    @using (Html.BeginForm("Index", "Home", FormMethod.Post, new
    {
        enctype = "multipart/form-data"
    }))
    {
        <div class="card-header">
            <button id="add-button" type="button" class="btn btn-primary">Add</button>
            <button id="delete-button" type="button" class="btn btn-danger">Delete</button>
        </div>
        <div class="card-body">
            @Html.GridEditorFor(x => x.Products, "myGrid", "ag-theme-quartz", new Dictionary<string, Func<Column, object>>()
            {
                { nameof(HeaderNameAttribute), (column) => viewLocalizer[column.HeaderName].Value },
            })
        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    }
</div>


@section Scripts{
    <script>
        const categories = @Html.Raw(Json.Serialize(ViewBag.Cats))
        const subCategories = @Html.Raw(Json.Serialize(ViewBag.SubCategories))
        const qualityList = @Html.Raw(Json.Serialize(ViewBag.QualityList))
        const gridElement = document.querySelector('#myGrid');
        const gridazor = new Gridazor(gridElement, {
            propertyName: '@nameof(Model.Products)',
            localeText: '@rtl' == 'true' ? {
                pageSizeSelectorLabel: 'حجم الصفحة:',
                page: 'الصفحة',
                to: 'إلى',
                of: 'من'
            } : {},
            enableRtl: '@rtl' == 'true',
            overrideColumnDefs: [
                {
                    field: "catId",
                    cellEditor: GridazorDropdown,
                    cellEditorParams: {
                        values: categories.map(item => ({
                            value: item.id,
                            text: item.name
                        }))
                    },
                    valueFormatter: (params) => gridazorDropdownHelper.valueFormatter(params)
                },
                {
                    field: "subCatId",
                    cellEditor: GridazorDropdown,
                    cellEditorParams: params => {
                        return {
                            searchUrl: "Home/GetSubCategories?categoryId=" + params.data.catId,
                            values: subCategories.map(item => ({
                                value: item.id,
                                text: item.name
                            })) // for the first load
                        };
                    },
                    valueFormatter: (params) => gridazorDropdownHelper.valueFormatter(params)
                },
                {
                    field: "dateTime",
                    valueGetter: p => gridazorDateInputHelper.valueGetter(p)
                },
                {
                    field: "quality",
                    cellEditor: GridazorDropdown,
                    cellEditorParams: {
                        values: qualityList.map(item => ({
                            value: item.id,
                            text: item.name
                        }))
                    },
                    valueFormatter: (params) => gridazorDropdownHelper.valueFormatter(params)
                },
                {
                    field: "image",
                    cellEditor: GridazorFileInput,
                    cellEditorParams:{

                    },
                    cellRenderer: (params) => gridazorFileInputHelper.cellRender(params)
                },
                {
                    field: "price",
                    cellEditorParams: {
                        min: 0,
                        max: 10000,
                        precision: 2
                    }
                },
                {
                    field: "quantity",
                    cellEditorParams: {
                        min: 1,
                        max: 100,
                        precision: 0
                    }
                }
            ],
            enableDelete: true,
            deleteButtonId: "delete-button",
            addByButton: true,
            addButtonId: "add-button"
        });

        document.addEventListener('rowsAfterChanging', function (e) {
        });

        document.addEventListener('rowUpdated', function (e) {
        });

        document.addEventListener('rowAdded', function (e) {
        });

        document.addEventListener('rowDeleted', function (e) {
        });

        document.addEventListener('gridazorCellValueChanged', function (e) {
        });
    </script>
}